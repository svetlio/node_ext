<?php

/**
 * @file
 * Add custom functionality to nodes.
 * 1. Node weight - may be use in listing to order nodes
 */

/**
 * Implements hook_form_alter().
 */
function node_ext_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node_edit_form']) && $form['#node_edit_form'] && isset($form['field_weight'])) {
    //get the bigest number of field_weight
    $weight = db_select('field_data_field_weight', 'w')
      -> fields('w', array('field_weight_value'))
      -> condition('bundle', $form['type']['#value'], '=')
      -> orderBy('field_weight_value', 'DESC')
      -> range(0, 1)
      -> execute() -> fetchField(); 
    
    if ($weight == FALSE) {
      $weight = '0';
    }
    
    if (empty($form['field_weight']['und'][0]['value']['#default_value'])) {
      $form['field_weight']['und'][0]['value']['#default_value'] = $weight + 1;
    }
    //add suffix to this form field
    $form['field_weight']['#suffix'] = t('Latest Weight for this content type is:') . $weight;
  }
}

/**
 * Implementation of hook_node_view().
 */
function node_ext_node_view($node, $view_mode, $langcode) {
  //hide the field_weight
  if (isset($node -> field_weight)) {
    hide($node -> content['field_weight']);
  }
}

/**
 * Implementation of hook_node_view_alter().
 */
function node_ext_node_view_alter(&$build) {  
  if ($build['#view_mode'] == 'teaser' && isset($build['field_image'][1])) {
    foreach ($build['field_image'] AS $k => $item) {
      if (is_numeric($k) && $k > 0) {
        unset($build['field_image'][$k]);
      }
    }
  }
}

/**
 * Implementation of hook_node_view().
 */
function node_ext_preprocess_node(&$variables) {
  //add node template suggestion node--NODE-TYPE--VIEW-Mode.tpl.php
  $variables['theme_hook_suggestions'][] = 'node__' . $variables['type'] . '__' . $variables['view_mode'];
}

/**
 * Implementation of hook_enable().
 */
function node_ext_enable() {
  // Check if our field is not already created.
  if (!field_info_field('field_weight')) {
    
    $field = array(
      'field_name' => 'field_weight', 
      'type' => 'number_integer',
      'settings' => array(
        'label' => t('Weight'),
        'no_ui' => FALSE,
      ),
    );
    field_create_field($field);

    $bundles = array('page', 'article');
    // Create the instance on bundles.
    foreach($bundles AS $bundle) {
      $instance = array(
        'field_name' => 'field_weight', 
        'entity_type' => 'node',
        'label' => 'Weight', 
        'bundle' => $bundle, 
        // If you don't set the "required" property then the field wont be required by default.
        'required' => TRUE,
        'widget' => array(
          'type' => 'textfield',
        ), 
      );
      field_create_instance($instance);
    }
  }
}

/**
 * Implementation of hook_disable().
 */
function node_ext_disable() {
  if (field_info_field('field_weight')) {
    field_delete_field('field_weight');
  }
}

/**
 * Implements hook_block_info().
 */
function node_ext_block_info() {
  $blocks['go_back'] = array(
    'info' => t('Go Back'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function node_ext_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'go_back':
      $block['subject'] = '<none>';
      $block['content'] = render(drupal_get_form('my_go_back_form'));
      break;
  }
  return $block;
}

/**
 * Custom form implementation
 */
function my_go_back_form($form, $form_state) {
  $form = array();
  
  //add inline javascript to this form
  $form['#attached']['js'] = array(
    //insert clean js inline, uderstandable for many browsers
    'function goBack() {window.history.back()}' => array('type' => 'inline'),
    //insert external js from file - prevent default btn event
    drupal_get_path('module', 'node_ext') . '/misc/node_ext.js' => array('type' => 'file'),
  );
  
  //button definition
  $form['go_back'] = array(
    '#type' => 'button',
    '#value' => t('Back'),
    '#attributes' => array(
       'onclick' => array('goBack()'),
       'class' => array('go-back-btn'),
    ),
  );
  
  return $form;
}

////////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_theme()
 */
function node_ext_theme() {
  return array(
    'popup' => array(
      'template' => 'page__popup', //popup.tpl.php inside module directory.
      'arguments' => array('content' => null), //Array of variables in popup.tpl.php
    ),
  );
}
